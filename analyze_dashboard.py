#!/usr/bin/env python
# type: ignore
"""
Script de an√°lisis y optimizaci√≥n del c√≥digo del dashboard
Identifica problemas de rendimiento, errores l√≥gicos y oportunidades de mejora
"""

import os
import sys
sys.path.insert(0, os.getcwd())


from datetime import datetime, timedelta

import homologador.core.storage as storage
def analyze_dashboard_issues():
    """Analiza los problemas espec√≠ficos del dashboard"""
    
    print("üîç AN√ÅLISIS DE PROBLEMAS DEL DASHBOARD")
    print("=" * 50)
    
    # 1. Analizar datos en la base de datos
    print("\n1. üìä An√°lisis de datos:")
    repo = storage.get_homologation_repository()
    
    try:
        all_homologations_raw = repo.get_all()
        all_homologations = [dict(h) for h in all_homologations_raw]
        
        print(f"   ‚úì Total homologaciones: {len(all_homologations)}")
        
        # Verificar estructura de datos
        if all_homologations:
            sample = all_homologations[0]
            print(f"   ‚úì Campos disponibles: {list(sample.keys())}")
            
            # Verificar fechas
            created_at_values = [h.get('created_at') for h in all_homologations[:5]]
            print(f"   üìÖ Muestras de created_at: {created_at_values}")
            
            # Verificar estados
            statuses = set(h.get('status') for h in all_homologations)
            print(f"   üìà Estados encontrados: {statuses}")
            
            # Verificar URLs de repositorio
            repos = [h.get('repository_url') for h in all_homologations if h.get('repository_url')]
            print(f"   üîó Repositorios con URL: {len(repos)}")
            
        else:
            print("   ‚ùå No hay homologaciones en la base de datos")
            
    except Exception as e:
        print(f"   ‚ùå Error accediendo a datos: {e}")
    
    # 2. Probar c√°lculo de m√©tricas
    print("\n2. üßÆ Prueba de c√°lculo de m√©tricas:")
    
    try:
        # Simular c√°lculo de m√©tricas manualmente
        
        # Obtener datos

        from datetime import datetime, timedelta
        all_homologations_raw = repo.get_all()
        all_homologations = [dict(h) for h in all_homologations_raw]
        
        # Calcular m√©tricas b√°sicas
        days_back = 30
        date_limit = datetime.now() - timedelta(days=days_back)
        
        recent_homologations = []
        for h in all_homologations:
            try:
                created_date = datetime.fromisoformat(h.get('created_at', '2000-01-01'))
                if created_date >= date_limit:
                    recent_homologations.append(h)
            except ValueError:
                # Fecha malformada
                pass
        
        metrics = {
            'total_count': len(all_homologations),
            'recent_count': len(recent_homologations),
            'growth_rate': 0.0,
            'status_counts': {},
            'top_repositories': [],
            'daily_trends': {}
        }
        
        print(f"   ‚úì Total count: {metrics.get('total_count')}")
        print(f"   ‚úì Recent count: {metrics.get('recent_count')}")
        print(f"   ‚úì Growth rate: {metrics.get('growth_rate'):.2f}%")
        print(f"   ‚úì Status counts: {metrics.get('status_counts')}")
        print(f"   ‚úì Top repositories: {metrics.get('top_repositories')}")
        print(f"   ‚úì Daily trends: {len(metrics.get('daily_trends', {}))}")
        
        # Verificar c√°lculos l√≥gicos
        if metrics.get('total_count', 0) < metrics.get('recent_count', 0):
            print("   ‚ö†Ô∏è  PROBLEMA: Recent count > Total count")
        
        if metrics.get('growth_rate', 0) > 1000:
            print("   ‚ö†Ô∏è  PROBLEMA: Growth rate anormalmente alto")
            
    except Exception as e:
        print(f"   ‚ùå Error calculando m√©tricas: {e}")
        import traceback
        traceback.print_exc()

def identify_optimization_opportunities():
    """Identifica oportunidades de optimizaci√≥n"""
    
    print("\n3. ‚ö° Oportunidades de optimizaci√≥n:")
    
    # Analizar consultas de base de datos
    print("   üìä Consultas de base de datos:")
    print("     - get_all() puede ser lenta con muchos registros")
    print("     - Conversi√≥n dict() en cada m√©trica es ineficiente")
    print("     - M√∫ltiples iteraciones sobre los mismos datos")
    
    # Analizar l√≥gica de fechas
    print("   üìÖ Manejo de fechas:")
    print("     - datetime.fromisoformat() puede fallar con fechas malformadas")
    print("     - Comparaciones de fechas repetitivas")
    
    # Analizar c√°lculos
    print("   üßÆ C√°lculos:")
    print("     - Growth rate calculation puede ser imprecisa")
    print("     - Daily trends solo para 7 d√≠as pero period puede ser mayor")

def suggest_fixes():
    """Sugiere correcciones espec√≠ficas"""
    
    print("\n4. üîß Correcciones sugeridas:")
    
    fixes = [
        "1. Agregar √≠ndices en created_at para consultas m√°s r√°pidas",
        "2. Implementar cache de m√©tricas con TTL",
        "3. Usar consultas SQL agregadas en lugar de filtros Python",
        "4. Manejar fechas None/malformadas m√°s robustamente",
        "5. Normalizar estados de homologaciones",
        "6. Optimizar extracci√≥n de nombres de repositorio",
        "7. Corregir l√≥gica de daily trends para coincidir con period",
        "8. Agregar validaci√≥n de datos antes de c√°lculos"
    ]
    
    for fix in fixes:
        print(f"   ‚úÖ {fix}")

if __name__ == "__main__":
    analyze_dashboard_issues()
    identify_optimization_opportunities()
    suggest_fixes()
    
    print("\n" + "=" * 50)
    print("üìù RESUMEN:")
    print("   - El dashboard tiene varios problemas de rendimiento")
    print("   - Los c√°lculos pueden ser imprecisos con datos reales")
    print("   - Se necesita optimizaci√≥n de consultas y cache")
    print("   - Mejores validaciones y manejo de errores")