#!/usr/bin/env python3
"""
Script para ejecutar la aplicaci√≥n Homologador con todas las nuevas funcionalidades.
Este script evita problemas de importaciones relativas.
"""

import sys
import os

# Agregar el directorio principal al path
project_root = os.path.dirname(os.path.abspath(__file__))
homologador_path = os.path.join(project_root, 'homologador')
sys.path.insert(0, project_root)
sys.path.insert(0, homologador_path)

# Cambiar al directorio homologador para imports relativos
os.chdir(homologador_path)

def main():
    """Funci√≥n principal para ejecutar la aplicaci√≥n."""
    try:
        # Configurar manejo global de errores
        from homologador.core.error_handler import get_error_handler, ErrorSeverity
        error_handler = get_error_handler()
        
        # Importar PyQt6
        from PyQt6.QtWidgets import QApplication, QMessageBox
        from PyQt6.QtCore import Qt
        
        print("üöÄ Iniciando Homologador de Aplicaciones...")
        print("üìã Con nuevas funcionalidades implementadas:")
        print("   ‚úì Panel de m√©tricas y estad√≠sticas")
        print("   ‚úì Filtros avanzados")
        print("   ‚úì Sistema de exportaci√≥n")
        print("   ‚úì Tooltips contextuales")
        print("   ‚úì Tour guiado")
        print("   ‚úì Sistema de manejo de errores")
        print("   ‚úì Validaci√≥n de formularios mejorada")
        print()
        
        # Importar y crear la aplicaci√≥n completa con sistema de login
        try:
            from homologador.app import HomologadorApplication
            print("‚úì HomologadorApplication importada correctamente")
            
            # Crear la aplicaci√≥n con sistema de autenticaci√≥n
            homologador_app = HomologadorApplication()
            print("‚úì Aplicaci√≥n creada con sistema de login")
            print("‚úì Sistema de manejo de errores configurado")
            
            # Ejecutar la aplicaci√≥n (esto mostrar√° el login primero)
            result = homologador_app.run()
            print("‚úì Aplicaci√≥n iniciada exitosamente!")
            print()
            print("üéâ ¬°Disfruta probando las nuevas funcionalidades!")
            print("üí° Tip: Ingresa con admin/admin123 para probar las notificaciones")
            
            return result
            
        except ImportError as e:
            print(f"‚ùå Error importando MainWindow: {e}")
            print("üîß Intentando importaci√≥n alternativa...")
            
            # Importaci√≥n alternativa
            sys.path.insert(0, os.path.join(project_root, 'homologador'))
            
            try:
                from app import HomologadorApplication
                
                print("‚úì HomologadorApplication importada con m√©todo alternativo")
                
                # Crear la aplicaci√≥n con sistema de autenticaci√≥n
                homologador_app = HomologadorApplication()
                result = homologador_app.run()
                
                print("‚úì Aplicaci√≥n iniciada exitosamente!")
                return result
                
            except Exception as e2:
                print(f"‚ùå Error en importaci√≥n alternativa: {e2}")
                
                # Mostrar mensaje de error
                msg = QMessageBox()
                msg.setIcon(QMessageBox.Icon.Critical)
                msg.setWindowTitle("Error de Importaci√≥n")
                msg.setText("No se pudo iniciar la aplicaci√≥n")
                msg.setDetailedText(f"Error original: {e}\nError alternativo: {e2}")
                msg.exec()
                
                return 1
    
    except ImportError:
        print("‚ùå Error: PyQt6 no est√° instalado.")
        print("üì¶ Instale las dependencias con:")
        print("   pip install PyQt6")
        return 1
    
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())