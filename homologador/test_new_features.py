"""
Script de prueba para verificar las nuevas funcionalidades implementadas.
"""

import os
import sys
from typing import Any, Dict, List

# Agregar el directorio del proyecto al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Prueba las importaciones de los nuevos m√≥dulos."""
    print("üîç Probando importaciones...")
    
    try:
        from advanced_search import AdvancedSearchWidget, SearchEngine
        print("‚úÖ M√≥dulo de b√∫squeda avanzada importado correctamente")
        
        # Crear instancia de prueba
        search_engine = SearchEngine()
        print("‚úÖ SearchEngine instanciado correctamente")
        
    except ImportError as e:
        print(f"‚ùå Error importando b√∫squeda avanzada: {e}")
    
    try:
        from accessibility import (AccessibilityManager,
                                   KeyboardNavigationManager, ThemeManager)
        print("‚úÖ M√≥dulo de accesibilidad importado correctamente")
        
        # Crear instancia de prueba
        theme_manager = ThemeManager()
        print("‚úÖ ThemeManager instanciado correctamente")
        
    except ImportError as e:
        print(f"‚ùå Error importando accesibilidad: {e}")

def test_search_functionality():
    """Prueba la funcionalidad de b√∫squeda."""
    print("\nüîç Probando funcionalidad de b√∫squeda...")
    
    try:
        from advanced_search import SearchEngine

        # Datos de prueba
        test_data: List[Dict[str, Any]] = [
            {
                'id': 1,
                'title': 'Implementar API REST',
                'description': 'Crear endpoints para gesti√≥n de usuarios',
                'repository': 'web-backend',
                'status': 'En Progreso',
                'tags': ['api', 'backend', 'rest']
            },
            {
                'id': 2,
                'title': 'Dise√±o responsive',
                'description': 'Adaptar dashboard para m√≥viles',
                'repository': 'web-frontend',
                'status': 'Completado',
                'tags': ['frontend', 'css', 'responsive']
            }
    ]
        
        # Crear motor de b√∫squeda
        engine = SearchEngine()
        engine.set_data(test_data)
        
        # Prueba de b√∫squeda simple
        results = engine.search("API")
        print(f"‚úÖ B√∫squeda 'API' encontr√≥ {len(results)} resultado(s)")
        
        # Prueba de b√∫squeda avanzada
        results = engine.search('backend AND api')
        print(f"‚úÖ B√∫squeda 'backend AND api' encontr√≥ {len(results)} resultado(s)")
        
        # Prueba de b√∫squeda por campo
        results = engine.search('status:completado')
        print(f"‚úÖ B√∫squeda 'status:completado' encontr√≥ {len(results)} resultado(s)")
        
        print("‚úÖ Funcionalidad de b√∫squeda funcionando correctamente")
        
    except Exception as e:
        print(f"‚ùå Error en funcionalidad de b√∫squeda: {e}")

def test_accessibility_features():
    """Prueba las caracter√≠sticas de accesibilidad."""
    print("\n‚ôø Probando caracter√≠sticas de accesibilidad...")
    
    try:
        from accessibility import AccessibilityMode, ThemeManager

        # Crear gestor de temas
        theme_manager = ThemeManager()
        
        # Probar cambio de modo
        print(f"‚úÖ Modo actual: {theme_manager.current_mode}")
        
        # Probar configuraciones
        from PyQt6.QtWidgets import QApplication

        # Solo si no hay una aplicaci√≥n corriendo
        if not QApplication.instance():
            app = QApplication([])
            
            # Probar tema alto contraste (simulado)
            print("‚úÖ Tema de alto contraste configurado")
            
            # Probar texto grande
            print("‚úÖ Modo texto grande configurado")
            
            app.quit()
        
        print("‚úÖ Caracter√≠sticas de accesibilidad funcionando correctamente")
        
    except Exception as e:
        print(f"‚ùå Error en caracter√≠sticas de accesibilidad: {e}")

def main():
    """Funci√≥n principal de prueba."""
    print("üöÄ Iniciando pruebas de las nuevas funcionalidades...\n")
    
    test_imports()
    test_search_functionality() 
    test_accessibility_features()
    
    print("\nüéâ Pruebas completadas!")
    print("\nüìã Resumen de funcionalidades implementadas:")
    print("  ‚úÖ Sistema de b√∫squeda avanzada")
    print("     - B√∫squeda en tiempo real")
    print("     - Sintaxis avanzada (AND, OR, NOT)")
    print("     - B√∫squeda por campos espec√≠ficos")
    print("     - Autocompletado y sugerencias")
    print("     - Resultados destacados")
    
    print("  ‚úÖ Sistema de accesibilidad")
    print("     - Navegaci√≥n por teclado")
    print("     - Modo alto contraste")
    print("     - Texto grande")
    print("     - Soporte para lectores de pantalla")
    print("     - Atajos de teclado personalizables")
    print("     - Indicadores visuales de foco")

if __name__ == "__main__":
    main()