#!/usr/bin/env python3
"""
Script de prueba r√°pida para validar la funcionalidad de cambio de contrase√±as.
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from PyQt6.QtWidgets import QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget, QLabel
from PyQt6.QtCore import Qt

from ui.change_password_dialog import ChangeMyPasswordDialog
from ui.theme import apply_dark_theme


class TestPasswordWindow(QMainWindow):
    """Ventana de prueba para el cambio de contrase√±as."""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üîë Prueba de Cambio de Contrase√±as")
        self.resize(400, 300)
        
        # Datos de usuario simulado
        self.user_info = {
            'user_id': 1,
            'username': 'admin',
            'role': 'admin'
        }
        
        self.setup_ui()
    
    def setup_ui(self):
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Etiqueta de informaci√≥n
        info_label = QLabel("üß™ Prueba de Funcionalidad de Cambio de Contrase√±as")
        info_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(info_label)
        
        user_label = QLabel(f"Usuario de prueba: {self.user_info['username']}")
        user_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(user_label)
        
        # Bot√≥n para abrir di√°logo
        test_button = QPushButton("üîë Probar Cambio de Contrase√±a")
        test_button.clicked.connect(self.test_change_password)
        layout.addWidget(test_button)
        
        # Informaci√≥n adicional
        info_text = QLabel("""
        ‚ÑπÔ∏è Esta prueba abrir√° el di√°logo de cambio de contrase√±as.
        
        üí° Tips:
        ‚Ä¢ La contrase√±a actual es: admin123
        ‚Ä¢ Puedes usar el bot√≥n "Generar" para crear una nueva
        ‚Ä¢ El sistema validar√° la fortaleza de la contrase√±a
        ‚Ä¢ Los cambios se aplicar√°n inmediatamente
        """)
        info_text.setWordWrap(True)
        layout.addWidget(info_text)
    
    def test_change_password(self):
        """Abre el di√°logo de cambio de contrase√±as para prueba."""
        try:
            dialog = ChangeMyPasswordDialog(self.user_info, self)
            dialog.password_changed.connect(self.on_password_changed)
            dialog.exec()
        except Exception as e:
            print(f"Error al abrir di√°logo: {e}")
            import traceback
            traceback.print_exc()
    
    def on_password_changed(self):
        """Maneja el evento de cambio de contrase√±a."""
        print("‚úÖ Contrase√±a cambiada exitosamente en la prueba!")


def main():
    """Funci√≥n principal para ejecutar la prueba."""
    app = QApplication(sys.argv)
    
    # Aplicar tema
    apply_dark_theme(app)
    
    # Crear ventana de prueba
    window = TestPasswordWindow()
    window.show()
    
    print("üîë Iniciando prueba de cambio de contrase√±as...")
    print("üìù Usa las credenciales: admin / admin123")
    
    sys.exit(app.exec())


if __name__ == "__main__":
    main()