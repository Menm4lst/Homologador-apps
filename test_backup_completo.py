#!/usr/bin/env python3
"""
Prueba Completa del Sistema de Respaldos
=========================================

Este script realiza una verificaci√≥n exhaustiva del sistema de respaldos,
incluyendo la funcionalidad del core, la interfaz de usuario y las 
operaciones de respaldo/restauraci√≥n.
"""

import os
import sys
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append('.')

def test_core_backup_system():
    """Prueba el sistema de respaldos core."""
    print("üîç PROBANDO SISTEMA DE RESPALDOS CORE")
    print("=" * 50)
    
    try:
        # Test 1: Importaciones
        print("\n1. Verificando importaciones...")
        from homologador.core.backup_system import BackupManager, BackupInfo
        from homologador.core.storage import get_database_manager
        print("‚úÖ Importaciones exitosas")
        
        # Test 2: Creaci√≥n de respaldo b√°sico
        print("\n2. Creando respaldo b√°sico...")
        db_manager = get_database_manager()
        backup_path = db_manager.create_backup('test_completo_core')
        
        if backup_path and os.path.exists(backup_path):
            size = os.path.getsize(backup_path)
            print(f"‚úÖ Respaldo creado: {os.path.basename(backup_path)}")
            print(f"   Tama√±o: {size:,} bytes ({size/1024/1024:.2f} MB)")
            print(f"   Ubicaci√≥n: {backup_path}")
            return True
        else:
            print("‚ùå Error creando respaldo b√°sico")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en sistema core: {e}")
        return False

def test_ui_backup_system():
    """Prueba la interfaz de usuario del sistema de respaldos."""
    print("\n\nüé® PROBANDO INTERFAZ DE USUARIO")
    print("=" * 50)
    
    try:
        # Test 1: Importar componentes de UI
        print("\n1. Verificando componentes de UI...")
        from homologador.ui.backup_system import (
            BackupWorker, RestoreWorker, BackupSystemWidget, show_backup_system
        )
        from PyQt6.QtWidgets import QApplication
        print("‚úÖ Componentes de UI importados correctamente")
        
        # Test 2: Crear aplicaci√≥n Qt si no existe
        print("\n2. Inicializando aplicaci√≥n Qt...")
        app = QApplication.instance()
        if app is None:
            app = QApplication([])
        print("‚úÖ Aplicaci√≥n Qt lista")
        
        # Test 3: Crear widget del sistema de respaldos
        print("\n3. Creando widget de respaldos...")
        admin_user = {
            'id': 1,
            'username': 'admin',
            'role': 'admin',
            'full_name': 'Administrador Test'
        }
        
        backup_widget = BackupSystemWidget(admin_user)
        print("‚úÖ Widget de respaldos creado exitosamente")
        
        # Test 4: Verificar configuraci√≥n de workers
        print("\n4. Verificando workers...")
        
        backup_config = {
            'backup_path': 'backups',
            'include_database': True,
            'include_config': True,
            'include_logs': False,
            'include_user_files': False,
            'compression_level': 'Normal'
        }
        
        worker = BackupWorker(backup_config)
        print("‚úÖ BackupWorker configurado")
        
        restore_config = {
            'restore_database': True,
            'restore_config': True,
            'restore_user_files': False,
            'create_safety_backup': True
        }
        
        # Crear archivo temporal para test
        test_zip = Path("test_backup.zip")
        if not test_zip.exists():
            import zipfile
            with zipfile.ZipFile(test_zip, 'w') as zf:
                zf.writestr("test.txt", "test content")
        
        restore_worker = RestoreWorker(str(test_zip), restore_config)
        print("‚úÖ RestoreWorker configurado")
        
        # Limpiar archivo temporal
        if test_zip.exists():
            test_zip.unlink()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en interfaz de usuario: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_backup_directory_structure():
    """Verifica la estructura del directorio de respaldos."""
    print("\n\nüìÅ VERIFICANDO ESTRUCTURA DE DIRECTORIOS")
    print("=" * 50)
    
    try:
        # Verificar directorio principal de respaldos
        backup_dir = Path("C:/Users/Antware/OneDrive/backups")
        if backup_dir.exists():
            backup_files = list(backup_dir.glob("*.db"))
            print(f"‚úÖ Directorio de respaldos: {backup_dir}")
            print(f"   Respaldos encontrados: {len(backup_files)}")
            
            # Mostrar los √∫ltimos 5 respaldos
            if backup_files:
                print("   √öltimos respaldos:")
                for backup in sorted(backup_files, key=lambda x: x.stat().st_mtime)[-5:]:
                    size = backup.stat().st_size
                    mtime = backup.stat().st_mtime
                    from datetime import datetime
                    date_str = datetime.fromtimestamp(mtime).strftime("%Y-%m-%d %H:%M")
                    print(f"     - {backup.name} ({size:,} bytes, {date_str})")
        else:
            print("‚ö†Ô∏è Directorio de respaldos no encontrado")
        
        # Verificar directorio local de respaldos
        local_backup_dir = Path("backups")
        if local_backup_dir.exists():
            print(f"‚úÖ Directorio local de respaldos: {local_backup_dir}")
            
            # Verificar archivo de √≠ndice
            index_file = local_backup_dir / "backup_index.json"
            if index_file.exists():
                import json
                with open(index_file, 'r', encoding='utf-8') as f:
                    index_data = json.load(f)
                    backups_count = len(index_data.get('backups', []))
                    print(f"‚úÖ √çndice de respaldos: {backups_count} entradas registradas")
            else:
                print("‚ö†Ô∏è Archivo de √≠ndice no encontrado (se crear√° autom√°ticamente)")
        else:
            print("‚ö†Ô∏è Directorio local de respaldos no encontrado")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando estructura: {e}")
        return False

def test_backup_functionality():
    """Realiza una prueba completa de funcionalidad."""
    print("\n\n‚öôÔ∏è PRUEBA DE FUNCIONALIDAD COMPLETA")
    print("=" * 50)
    
    try:
        from homologador.core.storage import get_database_manager
        
        # Test 1: Crear m√∫ltiples respaldos con diferentes tipos
        print("\n1. Creando respaldos de prueba...")
        db_manager = get_database_manager()
        
        test_backups = []
        for i, backup_type in enumerate(['manual', 'auto', 'scheduled'], 1):
            backup_name = f"test_funcionalidad_{backup_type}_{i}"
            backup_path = db_manager.create_backup(backup_name)
            
            if backup_path:
                test_backups.append(backup_path)
                print(f"  ‚úÖ Respaldo {backup_type}: {os.path.basename(backup_path)}")
            else:
                print(f"  ‚ùå Error creando respaldo {backup_type}")
        
        print(f"‚úÖ {len(test_backups)} respaldos de prueba creados")
        
        # Test 2: Verificar integridad de archivos
        print("\n2. Verificando integridad de respaldos...")
        intact_count = 0
        for backup_path in test_backups:
            if os.path.exists(backup_path):
                size = os.path.getsize(backup_path)
                if size > 1000:  # Al menos 1KB
                    intact_count += 1
                    
        print(f"‚úÖ {intact_count}/{len(test_backups)} respaldos √≠ntegros")
        
        # Test 3: Simular limpieza (opcional)
        print("\n3. Limpieza de respaldos de prueba...")
        cleaned = 0
        for backup_path in test_backups:
            try:
                if os.path.exists(backup_path):
                    # Opcional: descomentar para limpiar archivos de prueba
                    # os.remove(backup_path)
                    # cleaned += 1
                    pass
            except Exception as e:
                print(f"  ‚ö†Ô∏è No se pudo limpiar {backup_path}: {e}")
        
        print(f"‚úÖ Prueba de funcionalidad completada")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba de funcionalidad: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Funci√≥n principal que ejecuta todas las pruebas."""
    print("üöÄ INICIANDO PRUEBA COMPLETA DEL SISTEMA DE RESPALDOS")
    print("=" * 60)
    
    # Ejecutar todas las pruebas
    tests = [
        ("Sistema Core", test_core_backup_system),
        ("Interfaz de Usuario", test_ui_backup_system),
        ("Estructura de Directorios", test_backup_directory_structure),
        ("Funcionalidad Completa", test_backup_functionality)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã EJECUTANDO: {test_name}")
        print("-" * 40)
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error cr√≠tico en {test_name}: {e}")
            results.append((test_name, False))
    
    # Resumen final
    print("\n\nüìä RESUMEN DE RESULTADOS")
    print("=" * 60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:<30} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado final: {passed}/{len(results)} pruebas exitosas")
    
    if passed == len(results):
        print("\nüéâ ¬°SISTEMA DE RESPALDOS COMPLETAMENTE FUNCIONAL!")
        print("‚úÖ Todas las funcionalidades verificadas exitosamente")
        print("‚úÖ Core del sistema operativo")
        print("‚úÖ Interfaz de usuario funcional")
        print("‚úÖ Estructura de archivos correcta")
        print("‚úÖ Operaciones de respaldo exitosas")
    else:
        print(f"\n‚ö†Ô∏è Sistema parcialmente funcional: {passed}/{len(results)} componentes operativos")
    
    return passed == len(results)

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Prueba interrumpida por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Error cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)